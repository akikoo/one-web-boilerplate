{"body":"# One Web/Mobile First Responsive Boilerplate\r\n\r\n\r\n## What is it? \r\n\r\nThe One Web Front-end Boilerplate is a modular framework for building responsive \r\nwebsites with **Apache Server Side Includes** (http://httpd.apache.org/docs/2.2/howto/ssi.html), \r\n**SMACSS** (Scalable and Modular Architecture for CSS, http://smacss.com/), \r\n**Sass** preprocessor (http://sass-lang.com/), and **RequireJS** (http://requirejs.org/). \r\n\r\n**Demo:** Optimized Styleguide Page: http://akikoo.github.com/one-web-boilerplate/publish/html-compressed/pages/styleguide/index.html.\r\n\r\nThis boilerplate draws code from many other projects, combining various solutions \r\ninto a custom, modular, and responsive front-end build framework. It's packed with \r\ngoodies, building on many of the industry best practices found in the resources \r\nlisted under Credits. The project also includes Ant build script that runs code \r\nquality tools against JavaScript and CSS files, minifying and concatenating them \r\nat the end of the process. \r\n\r\nThe One Web Boilerplate works well for me which is why I'm publishing it \r\nhere for you to use and improve. It basically extends popular boilerplates, including \r\n320 and Up (https://github.com/malarkey/320andup/), HTML5 Boilerplate (http://html5boilerplate.com/), \r\nMobile Boilerplate (http://html5boilerplate.com/mobile/), ZURB Foundation (http://foundation.zurb.com/), \r\nTwitter Bootstrap (http://twitter.github.com/bootstrap/), and many others, with \r\nServer Side Includes. The framework can easily be plugged into Continuous Integration \r\nsolutions, such as Jenkins: http://jenkins-ci.org. \r\n\r\nThis framework doesn't include any grid. You decide how you build your site. \r\nHowever, if you need a grid, have a look at the Fluid Grid that supports both \r\nSass (SCSS) and LESS CSS: http://akikoo.github.com/Fluid-Grid/. Sass/Compass is \r\nused by default, both in One Web Boilerplate and the Fluid Grid. \r\n\r\n\r\n## File structure\r\n\r\n### There are two main directories: /build and /webroot.\r\n\r\n* /build contains Ant build script and all the tools you need to make your \r\n    frontend build. Common build properties are defined in /build/config/project.properties. \r\n    There's also a folder called masterpage, which is used as a blueprint for creating new pages. \r\n\r\n* /webroot contains two subdirectories: /assets and /html. \r\n\r\n* /webroot/assets contains all the Sass and LESS files, stylesheets, JavaScript files and \r\n    theme images. \r\n\r\n* /webroot/html contains all the HTML files, generated by Apache Server Side Includes. \r\n    HTML properties are defined in /webroot/config.shtml.\r\n\r\nDev files are in /webroot/assets and /webroot/html.\r\nOptimised files are in /build/publish/assets and /build/publish/html.\r\n\r\n\r\n## Build tools\r\n\r\n* Java Development Kit (JDK) (http://www.oracle.com/technetwork/java/javase/downloads/index.html)\r\n* Ant (http://ant.apache.org/)\r\n* Ant-Contrib Tasks (http://ant-contrib.sourceforge.net/)\r\n* YUI Compressor (http://developer.yahoo.com/yui/compressor/)\r\n* Rhino (http://www.mozilla.org/rhino/)\r\n* JSLint (http://www.jslint.com/)\r\n* JSHint (http://www.jshint.com/)\r\n* CSSLint (http://csslint.net/)\r\n* HTML Compressor (http://code.google.com/p/htmlcompressor/)\r\n* JSDoc Toolkit (http://code.google.com/p/jsdoc-toolkit/)\r\n* JsDoc Toolkit Ant Task (http://code.google.com/p/jsdoc-toolkit-ant-task/)\r\n* Closure Compiler (https://developers.google.com/closure/compiler/)\r\n* r.js optimizer (http://requirejs.org/docs/download.html#rjs)\r\n* less-rhino (https://github.com/cloudhead/less.js/blob/master/dist/less-rhino-1.1.5.js)\r\n* JRuby (http://www.jruby.org/download)\r\n* OptiPNG http://optipng.sourceforge.net/\r\n* jpegtran http://www.ijg.org/\r\n\r\n\r\n## Environment setup\r\n\r\n### Apache Ant\r\n\r\n* Whether you're on Windows or Mac, you'll need the Java Development Kit (JDK) \r\n    (at least version 1.4). You can download it here: \r\n    http://www.oracle.com/technetwork/java/javase/downloads/index.html. \r\n    If you're not sure which version of the JDK you have, run the command \r\n    java -version in the terminal.\r\n\r\n* Download Apache Ant here (on Mac OSX it's usually already installed): \r\n    http://ant.apache.org/bindownload.cgi. On Windows, it's probably best to extract \r\n    the contents of the zip to C:\\ant.\r\n\r\n* See this article for how to finish the installation on your platform:\r\n    http://net.tutsplus.com/tutorials/other/automate-your-projects-with-apache-ant/ \r\n    (see section Windows- and Mac-Specific Install Bits.)\r\n\r\n### Apache SSI\r\nTo permit SSI on your server, see this article: \r\nhttp://httpd.apache.org/docs/2.2/howto/ssi.html\r\n\r\n### Ruby (you need this if you use Sass/Compass)\r\nOn OS X, you'll already have Ruby installed. On Windows, see http://rubyinstaller.org/downloads/. \r\nFor installing Sass, see http://sass-lang.com/tutorial.html. For installing Compass, \r\nsee http://compass-style.org/install/. You should use it, it's awesome. \r\n\r\nAll the other tools needed in the local build are in the tools folder.\r\n\r\n### Build configuration\r\nAfter Apache Ant, SSI, Ruby, Sass and Compass setup, you need to do two more things \r\nto configure the build:\r\n\r\n1. In /build/config/project.properties, look for 'web.home' in line number 124. \r\n    Change the path to your local directory.\r\n2. In that same file, look for 'web.url' in line number 126. Create an Apache \r\n    virtualhost that points to the location you defined for 'web.home' above. \r\n\r\nIf you get the \"java.lang.OutOfMemoryError: PermGen space\" error during the build \r\non OS X (I did), try running this in your terminal: export ANT_OPTS=-XX:MaxPermSize=256m\r\n\r\nYou should now be up and running with both the environment and the local build. \r\n\r\n\r\n## Things you need to know\r\n\r\n* A CSS preprocessor, either Sass (http://sass-lang.com/), default option with \r\n    Compass (http://compass-style.org/), or LESS (http://lesscss.org/) is used \r\n    to compile the stylesheets. If you don't want to use a preprocessor, you can \r\n    of course work with the CSS files directly. By default, it's assumed that you \r\n    compile Sass or LESS files on your local machine, and let the build process \r\n    do the CSSLint check on your generated CSS files. (There are tasks for Sass \r\n    and LESS processing in /build/build.xml, namely &lt;css.compile.sass /&gt; and \r\n    &lt;css.compile.less /&gt; macrodef calls, but they are commented out.) \r\n    To compile CSS files on your local machine, type one of the following commands \r\n    in the terminal (replace the '{pathtoworkingcopy}' with your local path):\r\n\r\n    a) using Sass:\r\n       sass --watch /{pathtoworkingcopy}/webroot/assets/scss:/{pathtoworkingcopy}/webroot/assets/css\r\n\r\n    b) using Compass with Sass:\r\n       compass watch /{pathtoworkingcopy}/webroot/assets\r\n\r\n    For more info, see Sass and Compass documentation. \r\n\r\n* Media Queries are based on 16px default font size and defined in ems. \r\n    The framework is designed to be modular so you should split the rules \r\n    into logical modules, and place the styles in /webroot/assets/scss/components/modules. \r\n    For more info on how to categorize your CSS, see SMACSS: http://smacss.com/.\r\n\r\n* JavaScript should not be relied on for layout. That's why I've adopted a \r\n    bulletproof solution from Nicholas Zakas and Tantek Ã‡elik: \r\n    http://www.nczonline.net/blog/2011/03/22/using-html5-semantic-elements-today/ \r\n    and http://tantek.com/presentations/2010/11/html5-now/.\r\n\r\n* Don't use IDs in CSS selectors. Use classes, or ARIA landmark roles instead \r\n    (referenced with CSS attribute selectors). See also http://oli.jp/2011/ids/.\r\n\r\n\r\n## Logic\r\n\r\n### HTML\r\n* Each page has a controller in /webroot/html/pages/pagename/index.shtml. \r\n    In that file, we include the config file and set variables, define the view, \r\n    and template file that we need to include, to render that particular page. \r\n    For more information, see project main index file: \r\n    https://github.com/akikoo/one-web-boilerplate/blob/master/webroot/html/index.shtml.\r\n\r\n### CSS - A number of stylesheets by default, compiled and imported by Sass, included in the following order: \r\n* /webroot/assets/css/common/normalize.css (third-party reset styles)\r\n* /webroot/assets/scss/common/elements.scss (global, mobile first styles, containing only \r\n    common colour and typographic rules for basic experience to all users)\r\n* /webroot/assets/scss/common/utilities.scss (helper styles from HTML5 Boilerplate and \r\n    HTML5 Mobile Boilerplate)\r\n* /webroot/assets/scss/common/base.scss (base stylesheet that imports the above \r\n    mentioned three stylesheets)\r\n* /webroot/assets/scss/components/layout.scss (page layout rules)\r\n* /webroot/assets/scss/components/module.scss (module base stylesheet that imports all the modules)\r\n* /webroot/assets/scss/components/state.scss (state rules for layout and modules)\r\n* /webroot/assets/scss/components/theme.scss (theme styles)\r\n* /webroot/assets/scss/main.scss (layout with Media Queries for responsive, \r\n    enhanced design for smartphones, tablets and larger screens)\r\n* /webroot/assets/scss/main-ie.scss (layout without Media Queries for legacy \r\n    IE 6/7/8 browsers). \r\n\r\nScalable and Modular Architecture for CSS (SMACSS, http://smacss.com/) is used by default. \r\nmain.scss and main-ie.scss are the main stylesheets that @import all the common styles. \r\nNote that styles are @import-ed only for development. For production, the build script \r\ninlines and minifies styles in the same order that you @import-ed them. Nice, eh? \r\nBut keep in mind that you have to @import the core styles (see above) before anything else. \r\n\r\nRemember that if you work with Sass, you should only do changes in /webroot/assets/scss/ \r\ndirectory, as the files in /webroot/assets/css/ will obviously be the generated ones, \r\nrewritten on each save. \r\n\r\nNew stylesheets you create should be placed in /webroot/assets/scss/components/modules. \r\nRemember to add @import rules for any new styles. After the base styles, the order \r\nin which the module stylesheets are included should't matter (you write your styles \r\ncarefully, right?) The idea is that module styles inherit only from base rules, not \r\nfrom other modules. \r\n\r\nconfig.rb file in /assets is used for passing compile options to Compass. By default \r\nyou don't need to touch that file. If you want to edit it, see Compass documentation. \r\n\r\n### JavaScript\r\n* Third-party plugins are included in /webroot/assets/js/lib. Custom scripts are \r\nin /webroot/assets/js/modules. Dependancies are managed by RequireJS (http://requirejs.org/), \r\na script loader that supports AMD (Asynchronous Module Definition) API. Script paths \r\nand their dependencies are defined in /webroot/assets/js/config.js. Scripts are \r\nimported in /webroot/assets/js/main.js. In the optimized script bundle, almond.js \r\n(https://github.com/jrburke/almond) is used in place of require.js, to package \r\neverything in just one script file. \r\n\r\n\r\n## Ant build process\r\n\r\n### To build your project, do the following\r\n\r\nThis assumes you've set up the build, as explained in Build configuration.\r\n\r\n1. Open terminal and go to /path_to_your_project/build \r\n2. Run ant -buildfile build.xml\r\n\r\n### The sequence of events is then as follows: \r\n\r\n1. Old build directory called /publish is deleted\r\n2. /publish directory is recreated, and build timestamps are added as text files\r\n3. HTML header and footer files are edited, to include minified and concatenated \r\n    assets, created during the build\r\n4. SHTML snippets are called to generate full HTML web pages\r\n5. SHTML snippets are called to generate HTML modules \r\n6. SHTML file extensions are changed to HTML and all pages are copied to \r\n    build/publish/html. Compressed HTML versions are copied to \r\n    build/publish/html-compressed\r\n7. Component, module, page and template lists are generated, to be included in \r\n    the project root index page\r\n8. HTML header and footer files are reverted, to include separate assets again \r\n    (we'll continue developing!)\r\n9. CSSLint tool is run against all CSS files (however excluding third-party stylesheets)\r\n10. JSHint tool is run against JavaScript code (excluding third-party scripts)\r\n11. JSDoc documentation is created and placed in build/publish/docs/jsdocs\r\n12. CSS files are concatenated by inlining all @import-ed styles, producing two \r\n    files: main.css and main-ie.css (one with and one without Media \r\n    Queries). This way, we can keep the CSS rules separate from the actual Media \r\n    Queries. Both files are then minified and placed in build/publish/assets/css. \r\n13. JavaScript files are minified and concatenated and placed in \r\n    /build/publish/assets/js/lib (currently only Modernizr and require.js.) \r\n    Note that compiled require.js contains the original require.js and all the \r\n    modules, loaded with almond require/define shim.\r\n14. Unoptimised images are copied to /build/publish/assets/img\r\n15. Temporary directory that was used during the build is deleted\r\n16. That's it!\r\n\r\nCongratulations! You now have a brand new /build/publish directory that has the \r\nfollowing four directories: \r\n\r\n* HTML files (/build/publish/html), \r\n* Compressed HTML files (/build/publish/html-compressed), \r\n* Minified and concatenated CSS and JS files (/build/publish/assets), and \r\n* JSDoc documentation (/build/publish/docs/jsdocs). \r\n\r\nYou can now deploy the site using your favourite Continuous Integration server. \r\nIt could be Jenkins (http://jenkins-ci.org) or Bamboo \r\n(http://www.atlassian.com/software/bamboo/). You decide. \r\n\r\nPlease note that the earlier version of this framework that uses the Yahoo YUI \r\ncompressor is tagged here: https://github.com/akikoo/one-web-boilerplate/tags. \r\nNowadays I prefer this framework to use RequireJS with an optimizer that manages \r\ndependencies in a much easier way. \r\n\r\nAnother note: I prefer Sass preprocessor nowadays because it's more powerful \r\n(especially with Compass) and because it's actively maintained and developed. \r\nThis means that I'm not anymore actively maintaining the LESS files in this \r\nframework. Just wanted to let you know. However do let me know if you have any \r\nLESS issues so I can try to fix them (I'd be more up for it if I knew someone out \r\nthere was still using LESS with this framework...).\r\n\r\nOne more thing: you should obviously exclude /build/publish directory from version \r\ncontrol because that directory is cleaned up and recreated on each build. \r\nNo need to track changes to that.\r\n\r\n## To-Do: \r\n* Small tweaks here and there... \r\n\r\nThanks and good luck! \r\n\r\n\r\n## Credits\r\n\r\n### Boilerplates:\r\n* http://html5boilerplate.com\r\n* http://html5boilerplate.com/mobile\r\n* https://github.com/malarkey/320andup/\r\n* http://foundation.zurb.com/\r\n* http://twitter.github.com/bootstrap/\r\n* Big thanks to *Will Howat* (@willhowat: http://twitter.com/willhowat) and *Andrew \r\n    Massey* (@wearymadness: http://twitter.com/wearymadness) for the inspiration, \r\n    code, and fresh ideas. Great work on the Archetype framework!\r\n\r\n### Generic build/deploy process optimization:\r\n* Thanks to *Dennis Green-Lieber* (@dennislieber: http://twitter.com/dennislieber) \r\n    for promoting the use of the framework and for great suggestions and ideas for \r\n    making it better. \r\n\r\n### Solutions:\r\n* http://code.google.com/chrome/chromeframe/\r\n* http://www.cssstickyfooter.com/\r\n\r\n### Media queries:\r\n* http://forabeautifulweb.com/blog/about/hardboiled_css3_media_queries/\r\n* http://stuffandnonsense.co.uk/blog/about/proportional_leading_with_css3_media_queries/\r\n* http://www.blog.highub.com/mobile-2/revisit-hardboiled-css3-media-queries/\r\n* http://css-tricks.com/6731-css-media-queries/\r\n* http://www.quirksmode.org/blog/archives/2010/08/combining_media.html\r\n* http://www.slideshare.net/bryanrieger/rethinking-the-mobile-web-by-yiibu\r\n* http://www.cloudfour.com/css-media-query-for-mobile-is-fools-gold/\r\n* http://www.broken-links.com/2011/02/21/using-media-queries-in-the-real-world/\r\n* http://nicolasgallagher.com/mobile-first-css-sass-and-ie/\r\n\r\n### Inspiration:\r\n* http://www.abookapart.com/products/responsive-web-design\r\n* http://easy-readers.net/\r\n* http://www.alistapart.com/articles/responsive-web-design/\r\n* http://www.lukew.com/ff/entry.asp?933\r\n* http://adactio.com/journal/1716/\r\n* http://adactio.com/journal/4780/\r\n* http://adactio.com/journal/1700/\r\n\r\n### Markup:\r\n* http://www.456bereastreet.com/archive/201103/html5_sectioning_elements_headings_and_document_outlines/\r\n* http://www.456bereastreet.com/archive/201104/html5_document_outline_revisited/\r\n* http://mezzoblue.com/archives/2011/01/31/boilerplate/\r\n* http://www.nczonline.net/blog/2011/03/22/using-html5-semantic-elements-today/\r\n* http://tantek.com/presentations/2010/11/html5-now/\r\n* http://microformats.org/wiki/hatom\r\n\r\n### Images:\r\n* http://unstoppablerobotninja.com/entry/fluid-images/\r\n* http://blog.cloudfour.com/responsive-imgs/\r\n* http://www.cloudfour.com/responsive-imgs-part-2/\r\n* http://blog.cloudfour.com/responsive-imgs-part-3-future-of-the-img-tag/\r\n\r\n### CSS:\r\n* http://smacss.com/\r\n* http://oocss.org/\r\n* http://sass-lang.com/\r\n* https://github.com/davidrapson/scss-toolkit\r\n* http://jakearchibald.github.com/sass-ie/\r\n* http://lesscss.org/\r\n* http://oli.jp/2011/ids/\r\n* http://code.google.com/p/universal-ie6-css/\r\n* https://github.com/necolas/normalize.css\r\n\r\n### JavaScript:\r\n* http://requirejs.org/\r\n* https://github.com/jrburke/almond\r\n* https://github.com/tbranyen/backbone-boilerplate\r\n* https://github.com/ryanfitzer/Example-RequireJS-jQuery-Project\r\n\r\n\r\n> There's no mobile, everything's mobile.","tagline":"A One Web Boilerplate for all your Responsive Web needs. Powered by Apache SSI, SMACSS, Sass and RequireJS. Also includes Ant build script with several useful tools, as well as an SSI-based fork of adactio's Pattern-Primer (https://github.com/akikoo/Pattern-Primer).","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"One Web Boilerplate"}
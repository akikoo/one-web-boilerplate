<?xml version="1.0" encoding="utf-8"?>
<project name="One-Web-Boilerplate" default="build.dev" basedir="../"> <!-- one back since we're in /build -->

<!-- build.xml for one web boilerplate https://github.com/akikoo/one-web-boilerplate -->

	<description>JS/CSS Dev Build for One-Web-Boilerplate</description>


    <!-- 
	****************************************************************************
	* CONFIG 
	****************************************************************************
	-->

	<!-- Load Default config properties for this build -->
	<property file="build/config/default.properties"/>
	
	<!-- Load Project config properties for this build -->
	<property file="build/config/project.properties"/>
	
    <!-- Load in Ant-Contrib to give us access to some very useful tasks -->
    <!-- the .jar file is located in the tools directory -->
	<!-- See http://ant-contrib.sourceforge.net/ -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${tool.antcontrib}"/>
		</classpath>
	</taskdef>

	<!-- This is the jsdocs task --> 
	<!-- Using an Ant task wrapper around the JsDoc Toolkit application -->
	<!-- See http://code.google.com/p/jsdoc-toolkit-ant-task/ -->
	<taskdef 
		name="jsdoctoolkit" 
		classname="uk.co.darrenhurley.ant.tasks.JsDocToolkit" 
		classpath="${tool.jsdoc.ant.task};${tool.jsdoc.js.jar}"
	/>
	


	<!--
    ****************************************************************************
	* BUILD TARGETS [public call to private targets]
    ****************************************************************************
    -->	
	<target name="build.dev" description="(PUBLIC) sets and kicks off the Dev site build">
		<echo message="Building Development Environment..."/>
		<antcall target="-build.dev" />
	</target>						
	<!-- Process order: init, HTML, CSS, JS, cleanup -->	
	<target name="-build.dev" description="(PRIVATE) calls all Dev site targets"
        depends="
            -init, 

			-useminified, 
			-make_shtml_into_html_modules, 
			-make_shtml_into_html_pages, 
			-components.list, 
			-modules.list, 
			-modules.list.include, 
			-pages.list, 
			-templates.list, 			
			-html.minify, 
			-useseparate, 

			css.lint, 
			-css.copy, 
			-css.common.minify, 
			-css.specific.minify, 

			js.hint, 
			-js.copy, 
			-js.common.minify, 
			-js.specific.minify, 
			-doc.jsdoc, 
			
			-img.copy, 			
			
			-cleanup
            ">
	</target>
	<!-- Add other build targets here if necessary (build.dev is the default) -->

	

    <!-- 
	****************************************************************************
	* TEST TARGETS [public]
	****************************************************************************
	-->
    <!-- CHECK JAVASCRIPT CODE QUALITY [public]-->	
	<!-- JSHint (option 1) - This is the default. Keep this public so it can be run independantly -->
	<!-- Adapted from the article: Improving Rhino CLI utility performance -->	
	<!-- http://www.nczonline.net/blog/2011/10/25/improving-rhino-cli-utility-performance/ -->
	<target name="js.hint" description="(PUBLIC) Runs JSHint against all non-lib JS. Outputs to console.">
		<echo message="Running JSHint..."/>	
		<!-- execute jshint on the javascript, with options -->				
		<!-- Take all the JS files except for those listed in exclude -->
		<fileset 
			dir="${src.js.dir}" 
			includes="${file.include.js}"
			excludes="${file.exclude.default.js}, ${file.exclude.js}" 
			id="jsfiles.raw"
		/>
		<pathconvert pathsep=" " property="jsfiles.clean" refid="jsfiles.raw" />
		<exec executable="java" failonerror="true">
			<arg line="-jar"/>
			<arg path="${tool.rhino}"/>
			<arg path="${tool.jshint}"/>
			<arg line="${jsfiles.clean} ${tool.jshint.opts}" />
		</exec>
		<echo>JSHint Successful</echo>		
	</target>	
	<!-- JSLint (option 2) - Currently not run during the build. Keep this public so it can be run independantly -->
	<!-- Adapted from the article: Improving Rhino CLI utility performance -->	
	<!-- http://www.nczonline.net/blog/2011/10/25/improving-rhino-cli-utility-performance/ -->	
	<target name="js.lint" description="(PUBLIC) Runs JSLint against all non-lib JS. Outputs to console.">
		<echo message="Running JSLint..."/>	
		<!-- execute jshint on the javascript, with options -->				
		<!-- Take all the JS files except for those listed in exclude -->
		<fileset 
			dir="${src.js.dir}" 
			includes="${file.include.js}"
			excludes="${file.exclude.default.js}, ${file.exclude.js}" 
			id="jsfiles.raw"
		/>
		<pathconvert pathsep=" " property="jsfiles.clean" refid="jsfiles.raw" />
		<exec executable="java" failonerror="true">
			<arg line="-jar"/>
			<arg path="${tool.rhino}"/>
			<arg path="${tool.jslint}"/>
			<arg line="${jsfiles.clean} ${tool.jslint.opts}" />
		</exec>
		<echo>JSLint Successful</echo>		
	</target>



    <!-- CHECK CSS CODE QUALITY [public] -->	
	<!-- CSSLint - Keep this public so it can be run independantly -->
	<!-- See https://github.com/stubbornella/csslint/wiki/Build-System-Integration -->
	<target name="css.lint" description="(PUBLIC) Runs CSSLint against all CSS files. Outputs to console">
		<echo message="Running CSSLint..."/>		
		<!-- Take all the CSS files except for those listed in exclude -->
		<fileset 
			dir="${src.css.dir}" 
			includes="${file.include.css}" 
			excludes="${file.exclude.default.css}" 
			id="cssfiles.raw"/>
		<pathconvert pathsep=" " property="cssfiles.clean" refid="cssfiles.raw" />
		<exec executable="java" failonerror="true">
			<arg line="-jar"/>
			<arg path="${tool.rhino}" />
			<arg path="${tool.csslint}" />	
			<!-- your customized arguments go here -->
			<arg line="${cssfiles.clean} --warnings=${tool.csslint.warnings} --errors=${tool.csslint.errors}"/>	
		</exec>        
		<echo>CSSLint Successful</echo>	
	</target>


	
	<!--
	****************************************************************************
    * DOCUMENTATION TARGETS [private]
	****************************************************************************
    -->
	<!-- GENERATE JSDOC DOCUMENTATION BASED ON THE SCRIPTS SPECIFIED BELOW [private] -->		
	<target name="-doc.jsdoc" description="(PRIVATE) Generates JSDocs output">	
		<echo>Generating JSDocs documentation... </echo>
		
		<jsdoctoolkit jsdochome="${jsdoc.home}/" template="jsdoc" outputdir="${publish.dir}/${docs.dir}/${out.jsdocs.dir}/">
			<!-- Exclude all third party plugins -->
			<fileset 
				dir="${src.js.dir}"
				includes="${file.include.jsdoc.js}"
				excludes="${file.exclude.jsdoc.js}"/> 
		</jsdoctoolkit>
		<echo>Writing JSDocs to ${build.dir}/${publish.dir}/${docs.dir}...</echo>
	</target>	



    <!-- 
	****************************************************************************
	* FUNCTIONAL TARGETS [private]
	****************************************************************************
	-->

    <!--Create build dirs-->
	<target name="-init" description="(PRIVATE) Deletes the previous build files and creates the new build directory structure">
        
		<!--Create a time stamp-->
		<tstamp>
			<format property="TODAY" pattern="EEE, d MMM yyyy HH:mm:ss Z"/>
		</tstamp>

		<!--Delete previous build dir and files-->
		<echo message="Cleaning up previous build directory..."/>		
		<delete dir="${build.dir}/${publish.dir}"/>

		<!--Recreate build structure-->
		<echo message="Creating new build directories..."/>	
		<mkdir dir="${build.dir}/${publish.dir}/assets/js"/>
		<mkdir dir="${build.dir}/${publish.dir}/assets/css"/>
		<mkdir dir="${build.dir}/${publish.dir}/assets/img"/>		
		<mkdir dir="${build.dir}/${publish.dir}/${temp.dir}"/>

		<!--Write build time stamp into a file, for reference-->
		<echo file="${build.dir}/${publish.dir}/assets/js/tstamp.txt" append="false">Build Date: ${TODAY}</echo>
		<echo file="${build.dir}/${publish.dir}/assets/css/tstamp.txt" append="false">Build Date: ${TODAY}</echo>
	</target>


	
    <!-- COPY FILES FOR MANIPULATION [private]-->
	<!-- Make a temporary dir and copy the page specific CSS files into that folder -->
	<target name="-css.copy" description="(PRIVATE) Copies CSS files into a temp dir (removes any sub dirs)">
	<echo message="Copying CSS files..."/>
	<copy todir="${build.dir}/${publish.dir}/${temp.dir}/css/pages" flatten="true">
		<fileset
			dir="${src.css.dir}/pages"
			includes="${file.copy.include.css}"
			excludes="${file.copy.exclude.css}"
		/>
	</copy>
	<echo message="CSS files are now in ${build.dir}/${publish.dir}/${temp.dir}/css, ready to be manipulated"/>
	</target>
	<!-- Make a temporary dir, and flatten out the JS files into that folder -->
	<target name="-js.copy" description="(PRIVATE) Copies JS files into a temp dir (removes any sub dirs)">
		<echo message="Copying JavaScript files..."/>		
		<copy todir="${build.dir}/${publish.dir}/${temp.dir}/js" flatten="true">
			<fileset 
                dir="${src.js.dir}" 
                includes="${file.copy.include.js}" 
				excludes="${file.copy.exclude.js}"
			/>
		</copy>
		<copy todir="${build.dir}/${publish.dir}/assets/js">
			<fileset 
                dir="${src.js.dir}/lib" 
                includes="${modernizr.js}, ${lazyload.js}" 
			/>
		</copy>		
		<echo message="JavaScript files are now in ${build.dir}/${publish.dir}/${temp.dir}/js, ready to be manipulated"/>
	</target>
	<!-- Copy the images to be published, without optimising them -->	
	<target name="-img.copy">
		<echo message="Copying unoptimised images..."/>		
		<!-- Take all UI assets -->
		<copy todir="${build.dir}/${publish.dir}/assets/img/">
			<fileset 
				dir="${src.img.dir}" 
				includes="${file.copy.include.img}"/>
		</copy>
		<!-- Now copy over the touch icons -->
		<copy todir="${build.dir}/${publish.dir}">
			<fileset 
				dir="./" 
				includes="*.png"/>
		</copy> 		
		<echo message="Images are now in ${build.dir}/${publish.dir}/assets/img. Touch icons are in ${build.dir}/${publish.dir} (on live server these should be in the root)."/>
	</target>
	

	
    <!-- CREATE A NEW PAGE [public]-->	
	<!-- Copy the master page to a new page -->
	<!-- Keep this public so it can be run independantly -->	
	<target name="page.create" description="(PUBLIC) Creates a new page, based on the master page and saves it as webroot/html/pages/newpage. The name is prompted for.">
		<echo message="Copying master page to a new page..."/>		
		<input 
			message="Enter page name..."
			addproperty="page.name"
			defaultvalue="newpage"
		/>
		<copy todir="${src.html.dir}/${src.html.pages.dir}/${page.name}">
			<fileset 
				dir="${build.dir}/${config.dir}/${page.master}" 
				includes="*"/>
		</copy>
		<echo message="Created new page as ${src.html.dir}/${src.html.pages.dir}/${page.name}."/>
		<antcall target="-page.controller.write">
			<param name="page.name" value="${page.name}"/>
		</antcall>
		
	</target>	
    <!-- ASSIGN NEW PAGENAME TO A VARIABLE IN THE PAGE CONTROLLER FILE [private]-->	
	<target name="-page.controller.write" description="(PRIVATE) Assigns the new page name to a variable">
		<echo message="Writing new pagename to index.shtml so we can start using it immediately..."/>
		<replaceregexp byline="true">
			<regexp pattern='var="PAGE" value=""'/>
			<substitution expression='var="PAGE" value="${page.name}"'/>
			<fileset 
				dir="${src.html.dir}/${src.html.pages.dir}/${page.name}" 
				includes="index.shtml"/>
		</replaceregexp>
	</target>

	

	<!-- CREATE INC FILES FOR MAIN INDEX FILE, WITH LINKS TO COMPONENTS, MODULES AND PAGES [private]-->	
	<target name="-list.create" description="(PRIVATE) Reads file names in specified folder and calls another target to write them in a file.">
		<!-- Delete previous version, to start clean -->
		<delete file="${file.write}"/>
		<!-- Get the files (attributes are coming from a target that calls this one each time) -->
		<foreach param="elm" target="${target.call}">
			<fileset 
				dir="${dir.list}"
				includes="${file.include}" 
				excludes="${file.exclude}"
			/>
		</foreach>
	</target>	
	<target name="-elements.write">
		<!-- Make sure we get relative path for each file -->
		<property name="elm.path" value="${elm}" relative="yes" />
		<!-- Now write the elements in a file, one by one -->
		<echo file="${file.write}" append="true">&lt;li&gt;&lt;a href="${elm.path}"&gt;${elm.path}&lt;/a&gt;&lt;/li&gt;${line.separator}</echo>
	</target>	
	
	<target name="-elements.includes.write">
		<!-- Make sure we get relative path for each file -->
		<property name="elm.path" value="${elm}" relative="yes" />
		<property name="css.class.module" value="module" />
		<property name="css.class.source" value="source" />
		<property name="css.class.display" value="display" />
		<!-- Now write the elements in a file, one by one -->
		<echo file="${file.write}" append="true">&lt;div class="${css.class.module}"&gt;${line.separator}    &lt;h3&gt;Module: &lt;a href="${elm.path}"&gt;${elm.path}&lt;/a&gt;&lt;/h3&gt;${line.separator}    &lt;h4&gt;Display&lt;/h4&gt;&lt;div class='${css.class.display}'&gt;&lt;!--#include virtual="${elm.path}" --&gt;&lt;/div&gt;${line.separator}    &lt;h4&gt;Source&lt;/h4&gt;&lt;div class="${css.class.source}"&gt;&lt;textarea rows='6'&gt;&lt;!--#include virtual="${elm.path}" --&gt;&lt;/textarea&gt;&lt;/div&gt;${line.separator}&lt;/div&gt;${line.separator}${line.separator}</echo>
	</target>
				
	<target name="-components.list">
		<antcall target="-list.create">
			<param name="dir.list" value="${src.html.dir}/${src.html.components.dir}"/>
			<param name="file.write" value="${src.html.dir}/${inc.components}"/>
			<param name="file.include" value="*"/>
			<param name="file.exclude" value=""/>
			<param name="target.call" value="-elements.write"/>
		</antcall>
		<antcall target="-list.replace">
			<param name="file.write" value="${src.html.dir}/${inc.components}"/>
		</antcall>				
	</target>	
	<target name="-modules.list">
		<antcall target="-list.create">
			<param name="dir.list" value="${src.html.dir}/${src.html.modules.dir}"/>
			<param name="file.write" value="${src.html.dir}/${inc.modules}"/>
			<param name="file.include" value="*"/>
			<param name="file.exclude" value=""/>
			<param name="target.call" value="-elements.write"/>
		</antcall>
		<antcall target="-list.replace">
			<param name="file.write" value="${src.html.dir}/${inc.modules}"/>
		</antcall>
	</target>
	<target name="-modules.list.include">
		<antcall target="-list.create">
			<param name="dir.list" value="${src.html.dir}/${src.html.modules.dir}"/>
			<param name="file.write" value="${src.html.dir}/${src.html.modules.dir}/${inc.modules}"/>
			<param name="file.include" value="**/*"/>
			<param name="file.exclude" value="content_elements.shtml"/>
			<param name="target.call" value="-elements.includes.write"/>
		</antcall>
		<antcall target="-list.replace">
			<param name="file.write" value="${src.html.dir}/${src.html.modules.dir}/${inc.modules}"/>
		</antcall>
	</target>
	<target name="-pages.list">
		<antcall target="-list.create">
			<param name="dir.list" value="${src.html.dir}/${src.html.pages.dir}"/>
			<param name="file.write" value="${src.html.dir}/${inc.pages}"/>
			<param name="file.include" value="**/index.shtml"/>
			<param name="file.exclude" value=""/>
			<param name="target.call" value="-elements.write"/>
		</antcall>
		<antcall target="-list.replace">
			<param name="file.write" value="${src.html.dir}/${inc.pages}"/>
		</antcall>				
	</target>
	<target name="-templates.list">
		<antcall target="-list.create">
			<param name="dir.list" value="${src.html.dir}/${src.html.templates.dir}"/>
			<param name="file.write" value="${src.html.dir}/${inc.templates}"/>
			<param name="file.include" value="*.shtml"/>
			<param name="file.exclude" value=""/>			
			<param name="target.call" value="-elements.write"/>
		</antcall>
		<antcall target="-list.replace">
			<param name="file.write" value="${src.html.dir}/${inc.templates}"/>
		</antcall>				
	</target>	
	<target name="-list.replace">
		<replace file="${file.write}" token='webroot/html/' value='/html/'/>			
	</target>	
	
	
	
	<!-- OPTIMIZE HTML FILES [private]-->
	<target name="-html.minify" description="(PRIVATE) Compresses HTML files but keeps line breaks for readability">
		<echo message="Compressing HTML files (keeping line breaks)..."/>		
		<apply executable="java" parallel="false">
			<fileset 
				dir="${build.dir}/${publish.dir}/html/pages/" 
				includes="${file.include.html}"
				excludes="${file.exclude.html}" 
				/>
			<arg value="-jar"/>
			<arg path="${tool.htmlcompressor}"/>
			<arg line="--type html"/>
			<arg line="--preserve-line-breaks"/>
			<srcfile/>
			<arg value="-o"/>
			<mapper type="glob" from="*" to="${publish.dir}/html-compressed/pages/*"/>
			<targetfile/>
		</apply>
	</target>


	
    <!-- OPTIMIZE CSS FILES [private]-->
	<target name="-css.common.minify" depends="-css.responsive.minify,-css.unresponsive.minify" description="(PRIVATE) Minifies common stylesheets">
		<echo message="Minifying common stylesheets ..."/>
		<antcall target="-css.minify">
			<param name="dir.temp.css" value="${build.dir}/${publish.dir}/${temp.dir}/css"/>
			<param name="dir.publish.css" value="${publish.dir}/assets/css/*-min.css"/>
			<param name="file.include.css" value="${file.include.css}"/>
			<param name="file.exclude.css" value="${file.root.mq.css}, ${file.root.css}, pages/*"/>
		</antcall>
	</target>
	<target name="-css.specific.minify" description="(PRIVATE) Minifies page specific stylesheets">
		<echo message="Minifying page specific stylesheets ..."/>
		<mkdir dir="${build.dir}/${publish.dir}/assets/css/pages"/>	
		<antcall target="-css.minify">
			<param name="dir.temp.css" value="${build.dir}/${publish.dir}/${temp.dir}/css/pages"/>
			<param name="dir.publish.css" value="${publish.dir}/assets/css/pages/*-min.css"/>
			<param name="file.include.css" value="${file.include.css}"/>
			<param name="file.exclude.css" value=""/>
		</antcall>
	</target>
    <!-- PREPARE CSS FILES FOR MINIFYING [private]-->
	<target name="-css.responsive.minify" description="(PRIVATE) Concatenates @import-ed stylesheets with Media Queries">
		<echo message="Inlining @import-ed stylesheets with Media Queries ..."/>
		<antcall target="-mq.support">
			<param name="file.root.css" value="${file.root.mq.css}"/>
			<param name="file.target.css" value="${file.target.mq.css}"/>
		</antcall>
	</target>
	<target name="-css.unresponsive.minify" description="(PRIVATE) Concatenates @import-ed stylesheets without Media Queries">
		<echo message="Inlining @import-ed stylesheets without Media Queries ..."/>
		<antcall target="-mq.nosupport">
			<param name="file.root.css" value="${file.root.css}"/>
			<param name="file.target.css" value="${file.target.css}"/>
		</antcall>
	</target>
    <!--Minify CSS files-->
	<target name="-css.minify" description="(PRIVATE) Minifies CSS files">		
		<apply executable="java" parallel="false">				
			<fileset 
                dir="${dir.temp.css}" 
                includes="${file.include.css}" 
				excludes="${file.exclude.css}"
			/>
			<arg line="-jar"/>
			<arg path="${tool.yuicompressor}"/>
			<arg line="--line-break 0"/>
			<srcfile/>
			<arg line="-o"/>
			<mapper type="glob" from="*.css" to="${dir.publish.css}"/>
			<targetfile/>
		</apply>
		<echo>Done!</echo>
	</target>	
		<!-- Concatenate @import-ed files to the target file -->		
		<!-- This target is customized from the HTML5 boilerplate build script -->
	<target name="-css.import" description="(PRIVATE) Inlines any stylesheets that are @import-ed in the root stylesheet">
		
		<!-- Load in Ant-Contrib to give us access to some very useful tasks! -->
		<!-- the .jar file is located in the tools directory -->
		<!-- For some reason, we need to include this once again even if it's already in the head of this document -->
		<taskdef resource="net/sf/antcontrib/antlib.xml">
			<classpath>
				<pathelement location="${basedir}/build/tools/ant-contrib-1.0b3.jar"/>
			</classpath>
		</taskdef>
	
		<echo message="Concatenating any @imports...${build.dir}/${publish.dir}/${temp.dir}/css/${file.root.css}"/>
			
        <!-- copy source file to intermediate directory -->
		<copy file="${src.css.dir}/${file.root.css}" tofile="${build.dir}/${publish.dir}/${temp.dir}/css/${file.root.css}"/>

        <!-- replace imports with bp-import tags (part 1) this one wraps @media types -->
		<replaceregexp file="${build.dir}/${publish.dir}/${temp.dir}/css/${file.root.css}" 
                        match="^@import\s+(?:url\s*\(\s*['&quot;]?|['&quot;])((?!http:|https:|ftp:)[^&quot;^'^\s]+)(?:['&quot;]?\s*\)|['&quot;])\s*([\w\s,\-]*);.*$"
                       replace="@media \2{ /* bp-import: \1 */ }" byline="true" />
        
        <!-- replace imports with bp-import tags (part 2) -->
		<replaceregexp file="${build.dir}/${publish.dir}/${temp.dir}/css/${file.root.css}" 
                       match="^@media \{ (/\* .* \*/) \}" replace="\1" byline="true" />

        <!-- copy skeleton to concat file -->
		<copy file="${build.dir}/${publish.dir}/${temp.dir}/css/${file.root.css}"
              tofile="${build.dir}/${publish.dir}/${temp.dir}/css/${file.target.css}" overwrite="true"/>

        <!-- load the file into a property -->
		<loadfile property="imports" srcfile="${build.dir}/${publish.dir}/${temp.dir}/css/${file.root.css}"/>

		<var name="concat-files" value="${file.root.css}"/>

        <!-- go over the file line by line -->
		<for delimiter="${line.separator}" param="import" list="${imports}">
			<sequential>
                <!-- does this line contain an bp-import? -->
				<propertyregex property="file.name" input="@{import}" regexp="/\* bp-import: (.*) \*/" select="\1" casesensitive="true" override="true" />

				<if>
					<isset property="file.name"/>
					<then>
						<var name="concat-files" value="${file.name},${concat-files}"/>

                        <!-- load the file into a variable -->
						<loadfile property="file.contents" srcFile="${src.css.dir}/${file.name}"/>

                        <!-- pop that file into the concatenated output file -->
						<replace file="${build.dir}/${publish.dir}/${temp.dir}/css/${file.target.css}" token="/* bp-import: ${file.name} */" value="${file.contents}"/>

						<var name="file.contents" unset="true"/>
					</then>
				</if>
			</sequential>
		</for>
	</target>
	
	<!-- Leave Media Queries in copied stylesheets -->		
	<target name="-mq.support" depends="-css.import" description="(PRIVATE) Calls the CSS minifier">
		<echo message="Leaving Media Queries untouched for modern browsers..."/>
	</target>
	
	<!-- Comment out Media Queries in copied stylesheets -->	
	<target name="-mq.nosupport" depends="-css.import" description="(PRIVATE) Calls the RegEx target that comments out Media Queries">
		<echo message="Commenting out Media Queries in style sheets before optimizing them, to generate a mid-size screen version for browsers that don't suppport Media Queries..."/>
		
		<replaceregexp byline="true">
			<regexp pattern="\/\*replace\*\/\@media only"/>
			<substitution expression="\/\*\@media only"/>
			<fileset 
		dir="${build.dir}/${publish.dir}/${temp.dir}/css" 
		includes="${file.target.css}"/>
		</replaceregexp>

		<replaceregexp byline="true">
			<regexp pattern="\{\/\*replace\*\/"/>
			<substitution expression="\{\*\/"/>
			<fileset 
		dir="${build.dir}/${publish.dir}/${temp.dir}/css" 
		includes="${file.target.css}"/>
		</replaceregexp>
		
		<replaceregexp byline="true">
			<regexp pattern="\}\/\*replace\*\/"/>
			<substitution expression="\/\*\}\*\/"/>
			<fileset 
		dir="${build.dir}/${publish.dir}/${temp.dir}/css" 
		includes="${file.target.css}"/>
		</replaceregexp>
	</target>		
	
	
	
    <!-- OPTIMIZE JAVASCRIPT FILES [private]-->
	<target name="-js.common.minify" description="(PRIVATE) Minifies common JavaScript files">
		<echo message=""/>
		<antcall target="-js.concatenate">			
			<param name="dir.source.js" value="${build.dir}/${publish.dir}/${temp.dir}/js"/>			
			<param name="dir.target.js" value="${publish.dir}/${temp.dir}/js/*-min.js"/>
			<param name="file.include.js" value="${file.include.js}"/>
			<param name="file.exclude.js" value="${file.exclude.default.js}"/>
		</antcall>
	</target>
	<target name="-js.specific.minify" description="(PRIVATE) Minifies page specific JavaScript files">
		<echo message=""/>
		<mkdir dir="${build.dir}/${publish.dir}/assets/js/pages"/>				
		<antcall target="-js.minify">
			<param name="dir.source.js" value="./${src.js.dir}/pages"/>
			<param name="dir.target.js" value="./${publish.dir}/assets/js/pages/*-min.js"/>			
			<param name="file.include.js" value="${file.include.js}"/>			
			<param name="file.exclude.js" value=""/>
		</antcall>
	</target>	
	<!--Minify JS files, excluding third party scripts that have already been minified-->
	<target name="-js.minify" description="(PRIVATE) Minifies JavaScript files">
		<apply executable="java" parallel="false">
			<fileset 
                dir="${dir.source.js}" 
                includes="${file.include.js}"	
				excludes="${file.exclude.js}"/>
			<arg line="-jar"/>
			<arg path="${tool.yuicompressor}"/>
			<srcfile/>
			<arg line="-o"/>
			<mapper type="glob" from="*.js" to="${dir.target.js}"/>
			<targetfile/>
		</apply>
		<echo>Done!</echo>
	</target>
    <!--Concatenate JS files-->
	<target name="-js.concatenate" depends="-js.minify" description="(PRIVATE) Concatenates JavaScript files">
		<concat destfile="${build.dir}/${publish.dir}/assets/js/scripts-concat.min.js">
            <!-- ${file.concatenate.first.js} contains a comma separated list of files that should be first in the concatenated file-->
			<filelist 
                dir="${build.dir}/${publish.dir}/${temp.dir}/js" 
                files="${file.concatenate.first.js}"
				/>
			<!--All of the other files in the directory should appear after (except for Modernizr which is included separately in the page header)-->
			<fileset 
                dir="${build.dir}/${publish.dir}/${temp.dir}/js"
                includes="${file.include.default.js}" 
                excludes="
					${jquery.js}, 
					${modernizr.js}
					"/>
		</concat>
		<echo>Done!</echo>
	</target>


    <!-- CALL MERGE TARGET BELOW TO GENERATE HTML FILES FOR MODULES AND PAGES [private]-->
	<target name="-make_shtml_into_html_modules" description="(PRIVATE) Concatenates @import-ed stylesheets with Media Queries">
		<echo message="..."/>
		<antcall target="-make_shtml_into_html">
			<param name="file.shtml" value="html/modules/*.shtml"/>
		</antcall>
	</target>
	<target name="-make_shtml_into_html_pages" description="(PRIVATE) Concatenates @import-ed stylesheets with Media Queries">
		<echo message="..."/>
		<antcall target="-make_shtml_into_html">
			<param name="file.shtml" value="html/pages/**/index.shtml"/>
		</antcall>
	</target>	
    <!-- MERGE THE SSI INTO FULL WEB PAGES [private]-->
	<!-- Author: Robert Lie (http://www.mobilefish.com/download/ant/build_demo7.xml.txt) -->
	<!-- Customizations by Dawn Budge (http://www.dawnbudge.co.uk) and Aki Karkkainen (http://www.akikoo.org) -->
	<!-- Step 1. Search within the specified directories all *.shtml files -->
	<target name="-make_shtml_into_html" description="(PRIVATE) Converts SHTML files (Server Side Includes) into HTML files">
		<foreach param="msg" target="getfiles">
			<path>       
				<fileset 
					dir="${web.home}"
					includes="${file.shtml}" 
					excludes=""
				/>
			</path>
		</foreach>
	</target>
	<target name="getfiles">
		<!-- Step 2. For each shtml file, the path is converted to an URL (url_path) -->
		<!-- Example: 
		/one-web-boilerplate/webroot/html/pages/boilerplate/index.shtml
		
		is mapped to: 
		
		http://one-web-boilerplate/html/pages/boilerplate/index.shtml 
		(Assuming Apache virtualhost is pointing to /one-web-boilerplate/webroot)
		-->		
		
		<pathconvert targetos="unix" property="url_path">
			<path location="${msg}"/>
			<map from="${web.home}" to="${web.url}" />
		</pathconvert> 

		<!-- Step 3. For each shtml file, the location is created where to store the final web page (webpage_path) -->    
		<!-- Example: 
		/one-web-boilerplate/webroot/html/pages/boilerplate/index.shtml
		
		is mapped to: 

		/one-web-boilerplate/build/publish/html/pages/boilerplate/index.shtml -->
		
		<pathconvert targetos="unix" property="webpage_path">
			<path location="${msg}"/>
			<map from="${web.home}" to="${build.dir}/${publish.dir}" />
		</pathconvert> 

		<!-- Step 4. For each shtm file, the Get task is applied using the url_path (step 2) and webpage_path (step 3) -->
		<!-- By doing so the SSI are merged into a single web page. The created web page file however still has an shtml file extension. -->

		<!-- Create dirs dynamically for each page-->
		<dirname file="${webpage_path}" property="new.dir"/>
		<mkdir dir="${new.dir}"/>	

		<!-- gets a whole file from a url -->
		<get src="${url_path}" dest="${webpage_path}" />

		<!-- move the matched file to the deploy location and change the file extension -->
		<move todir="${build.dir}/${publish.dir}">
			<fileset dir="${build.dir}/${publish.dir}">
				<include name="**/*.shtml"/>
			</fileset>
			<mapper type="glob" from="*.shtml" to="*.${web.ext}"/>
		</move>  
	</target>
	

	
	<!-- Update HTML header and footer files to use the minified assets -->
	<!-- For syntax, see http://www.jajakarta.org/ant/ant-1.6.1/docs/en/manual/OptionalTasks/replaceregexp.html -->	
	<target name="-useminified" description="(PRIVATE) Sets the value of OPTIMISEDASSETS to true so we can use minified assets">
		<echo message="Including minified assets in HTML header and footer..."/>
		<replaceregexp byline="true">
			<regexp pattern="\'OPTIMISEDASSETS\' value=\'\'"/>
			<substitution expression="\'OPTIMISEDASSETS\' value=\'true\'"/>
			<fileset 
				dir="${src.html.usemin.dir}" 
				includes="${file.usemin.html}"/>
		</replaceregexp>
	</target>
	<!-- Revert HTML header and footer files back to using individual assets after the build -->	
	<target name="-useseparate" description="(PRIVATE) Resets the value of OPTIMISEDASSETS after we're done with the build">
		<echo message="Reverting, now including individual assets in HTML header and footer..."/>
		<replaceregexp byline="true">
			<regexp pattern="\'OPTIMISEDASSETS\' value=\'true\'"/>
			<substitution expression="\'OPTIMISEDASSETS\' value=\'\'"/>
			<fileset 
				dir="${src.html.usemin.dir}" 
				includes="${file.usemin.html}"/>
		</replaceregexp>
	</target>
	
			
	
    <!-- FINISH BY CLEANING UP TEMP DIR -->
	<!--Delete temporary dir where the minified files were copied before being concatenated-->
	<target name="-cleanup" description="(PRIVATE) Deletes the previous build files and creates a new build directory structure">
		<echo message="Deleting the temp directory..."/>
		<!--Delete previous build files-->
		<delete dir="${build.dir}/${publish.dir}/${temp.dir}"/>		
		<echo message="We're done!"/>		
	</target>

	

    <!-- OPTIMIZE PNG IMAGES [public]-->
	<!-- This task is run separately as we don't want to optimise images every time we do a build. -->
	<!-- Requires OptiPNG: http://optipng.sourceforge.net/ -->	
	<!-- INSTALL OptiPNG v0.6.5 on MAC OSX (adapted from http://www.phpied.com/install-png-tools-on-mac)
					
		1) Download OptiPNG: http://sourceforge.net/projects/optipng/files/OptiPNG/optipng-0.6.5/optipng-0.6.5.tar.gz/download
		2) Go to the dir where you downloaded it, and execute these commands in your terminal:
			$ tar -xzvf optipng-0.6.5.tar.gz
			$ cd optipng-0.6.5
			$ sudo ./configure
			$ sudo make install
			
			Done. OptiPNG is now installed to /usr/local/bin/optipng (by default)
			
		(Alternatively, you can just use Homebrew: http://mxcl.github.com/homebrew.)
	-->
	
	<target name="img.optipng" description="(PUBLIC) Optimizes .png images using optipng. ">
		<echo message="Optimizing PNG images..."/>
        <!-- osfamily=unix is actually true on OS X as well -->
		<if>
			<and>
				<os family="unix" />
			</and>
			<then>
				<delete>
					<fileset 
						dir="${build.dir}/${publish.dir}/assets/img/"
						includes="${file.include.img.png}"
						excludes="${file.exclude.img.png}"/>
				</delete>
				<apply executable="optipng" dest="${build.dir}/${publish.dir}/assets/img/" osfamily="unix">
					<fileset 
						dir="${src.img.dir}" 
						includes="${file.include.img.png}" 
						excludes="${file.exclude.img.png}"/>
					<arg value="-quiet"/>
					<arg value="-o7"/>
					<arg value="-out"/>
					<targetfile/>
					<srcfile/>
					<mapper type="identity"/>
				</apply>
			</then>
		</if>

		<apply executable="${tool.optipng}" dest="${build.dir}/${publish.dir}/assets/img/" osfamily="windows">
			<fileset 
				dir="${src.img.dir}" 
				includes="${file.include.img.png}" 
				excludes="${file.exclude.img.png}"/>
			<arg value="-quiet"/>
			<arg value="-o7"/>
			<arg value="-out"/>
			<targetfile/>
			<srcfile/>
			<mapper type="identity"/>
		</apply>
	</target>



    <!-- OPTIMIZE JPEG IMAGES [public]-->
	<!-- This task is run separately as we don't want to optimise images every time we do a build. -->
	<target name="img.jpegtran" description="(PUBLIC) Optimizes .jpg images using jpegtran">
		<echo message="Optimizing JPG images..."/> 
		<if>
			<equals arg1="${images.strip.metadata}" arg2="true"/>
			<then>
				<var name="strip-meta-tags" value="none"/>
			</then>
			<else>
				<var name="strip-meta-tags" value="all"/>
			</else>
		</if>

		<if>
			<and>
				<os family="unix" />
			</and>
			<then>
				<delete>
					<fileset 
						dir="${build.dir}/${publish.dir}/assets/img/"
						includes="${file.include.img.jpg}"
						excludes="${file.exclude.img.jpg}"/>
				</delete>				
				<apply executable="jpegtran" dest="${build.dir}/${publish.dir}/assets/img/" osfamily="unix">
					<fileset 
						dir="${src.img.dir}" 
						includes="${file.include.img.jpg}" 
						excludes="${file.exclude.img.jpg}"/>
					<arg value="-copy"/>
					<arg value="${strip-meta-tags}"/>
					<arg value="-optimize"/>
					<arg value="-outfile"/>
					<targetfile/>
					<srcfile/>
					<mapper type="identity"/>
                    <!-- you may want to flag optimized images. If so, do it here. Otherwise change this to type="identity" -->
                    <!--<mapper type="glob" from="*.jpg" to="*.jpg"/>-->
				</apply>
			</then>
		</if>

		<apply executable="${tool.jpegtran}" dest="${build.dir}/${publish.dir}/assets/img/" osfamily="windows">
			<fileset 
				dir="${src.img.dir}" 
				includes="${file.include.img.jpg}" 
				excludes="${file.exclude.img.jpg}"/>
			<arg value="-copy"/>
			<arg value="${strip-meta-tags}"/>
			<arg value="-optimize"/>
			<arg value="-outfile"/>
			<targetfile/>
			<srcfile/>
			<mapper type="identity"/>
            <!-- you may want to flag optimized images. If so, do it here. Otherwise change this to type="identity" -->
            <!--<mapper type="glob" from="*.jpg" to="*.jpg"/>-->
		</apply>
	</target>		
		
</project>

<?xml version="1.0" encoding="utf-8"?>
<project name="myProject" default="build.dev" basedir="../"> <!-- one back since we're in /build -->

	<description>JS/CSS Dev Build for myProject</description>


    <!-- 
	****************************************************************************
	* CONFIG 
	****************************************************************************
	-->

	<!-- Load Default config properties for this build -->
	<property file="build/config/default.properties"/>
	
	<!-- Load Project config properties for this build -->
	<property file="build/config/project.properties"/>	
	
    <!-- Load in Ant-Contrib to give us access to some very useful tasks -->
    <!-- the .jar file is located in the tools directory -->
	<!-- See http://ant-contrib.sourceforge.net/ -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${tool.antcontrib}"/>
		</classpath>
	</taskdef>

	<!-- This is the jsdocs task --> 
	<!-- Using an Ant task wrapper around the JsDoc Toolkit application -->
	<!-- See http://code.google.com/p/jsdoc-toolkit-ant-task/ -->
	<taskdef name="jsdoctoolkit" classname="uk.co.darrenhurley.ant.tasks.JsDocToolkit" classpath="${tool.jsdoc.ant.task};${tool.jsdoc.js.jar}"/>
	

	<!--
    ****************************************************************************
	* BUILD TARGETS [public call to private targets]
    ****************************************************************************
    -->	
	<target name="build.dev" description="(PUBLIC) sets and kicks off the Dev site build">
		<echo message="Building Development Environment..."/>
		<antcall target="-build.dev" />
	</target>						
	<!-- NOTE: add css.lint task after -css.minify once I've found a way to disable certain strict rules from CSSlint -->	
	<target name="-build.dev" description="(PRIVATE) calls all Dev site targets"
        depends="
            -init,
			-useminified, 
			-make_shtml_into_html, 
			-html.minify, 
			-css.minify, 
            -css.concatenate, 
			js.lint, 
			-doc.jsdoc, 
			-js.minify, 
            -js.concatenate, 
			-useseparate, 			
			-cleanup
            ">
	</target>
	<!-- Add other build targets here if necessary (build.dev is the default) -->
	
	

    <!-- 
	****************************************************************************
	* TEST TARGETS [public]
	****************************************************************************
	-->
    <!-- CHECK JAVASCRIPT CODE QUALITY [public]-->	
	<!-- JSLint (option 1) - Keep this public so it can be run independantly -->
	<target name="js.lint" depends="-js.copy" description="(PUBLIC) Runs JSLint against all non-lib JS. Outputs to console.">		
		<echo message="Running JSLint..."/>
		<!-- execute jslint on the javascript, with options -->
		<apply executable="java" parallel="false" failonerror="true">
			<!-- Take all the JS files except for those listed in exclude -->
			<fileset 
				dir="${build.dir}/${publish.dir}/${temp.dir}/js"
                includes="${file.include.js}"	
				excludes="${file.exclude.default.js}, ${file.exclude.js}"/>
			<arg value="-jar" />
			<arg path="${tool.rhino}" />
			<arg path="${tool.jslint}" />
			<srcfile/>
			<arg value="${tool.jslint.opts}" />
		</apply>        
		<echo>JSLint Successful</echo>
	</target>     			
	<!-- JSHint (option 2) - Keep this public so it can be run independantly -->
	<target name="js.hint" depends="-js.copy" description="(PUBLIC) Runs JSHint against all non-lib JS. Outputs to console.">
		<echo message="Running JSHint..."/>		
		<!-- execute jshint on the javascript, with options -->
		<apply executable="java" parallel="false" failonerror="true">
			<!-- Take all the JS files except for those listed in exclude -->
			<fileset 
				dir="${build.dir}/${publish.dir}/${temp.dir}/js"
                includes="${file.include.js}"	
				excludes="${file.exclude.default.js}, ${file.exclude.js}"/>
			<arg value="-jar" />
			<arg path="${tool.rhino}" />
			<arg path="${tool.jshint}" />
			<srcfile/>
			<arg value="${tool.jshint.opts}" />
		</apply>        
		<echo>JSHint Successful</echo>
	</target>    


    <!-- CHECK CSS CODE QUALITY [public] -->	
	<!-- CSSLint - Keep this public so it can be run independantly - FINISH OPTIONS CONFIGURATION ONCE API ISSUES HAVE BEEN SOLVED-->
	<!-- This task is currently not executed -->
	<target name="css.lint" depends="-css.copy" description="(PUBLIC) Runs CSSLint against all CSS files. Outputs to console">
		<echo message="Running CSSLint..."/>
		<apply executable="java" parallel="false" failonerror="true">
			<!-- Take all the CSS files except for those listed in exclude -->
			<fileset 
				dir="${build.dir}/${publish.dir}/${temp.dir}/css"
				includes="${file.include.css}"	
				excludes="${file.exclude.default.css}"/>	
			<arg value="-jar" />
			<arg path="${tool.rhino}" />
			<arg path="${tool.csslint}" />
			<srcfile/>
			<arg value="${tool.csslint.opts}" />
		</apply>
		<echo>CSSLint Successful</echo>
	</target>
	

	<!--
	****************************************************************************
    * DOCUMENTATION TARGETS [private]
	****************************************************************************
    -->
	<target name="-doc.jsdoc" description="(PRIVATE) Generates JSDocs output">	
		<echo>Generating JSDocs documentation... </echo>
		
		<jsdoctoolkit jsdochome="${jsdoc.home}/" template="jsdoc" outputdir="${publish.dir}/${docs.dir}/${out.jsdocs.dir}/">
			<!-- Exclude all third party plugins -->
			<fileset 
				dir="${src.js.dir}"
				includes="${file.include.jsdoc.js}"
				excludes="${file.exclude.jsdoc.js}"/> 
		</jsdoctoolkit>
		<echo>Writing JSDocs to ${build.dir}/${publish.dir}/${docs.dir}...</echo>
	</target>	


    <!-- 
	****************************************************************************
	* FUNCTIONAL TARGETS [private]
	****************************************************************************
	-->

    <!--Create build dirs-->
	<target name="-init" description="(PRIVATE) Deletes the previous build files and creates the new build directory structure">
        
		<!--Create a time stamp-->
		<tstamp>
			<format property="TODAY" pattern="EEE, d MMM yyyy HH:mm:ss Z"/>
		</tstamp>

		<!--Delete previous build dir and files-->
		<echo message="Cleaning up previous build directory..."/>		
		<delete dir="${build.dir}/${publish.dir}"/>

		<!--Recreate build structure-->
		<echo message="Creating new build directories..."/>	
		<mkdir dir="${build.dir}/${publish.dir}/assets/js"/>
		<mkdir dir="${build.dir}/${publish.dir}/assets/css"/>
		<mkdir dir="${build.dir}/${publish.dir}/assets/img"/>		
		<mkdir dir="${build.dir}/${publish.dir}/${temp.dir}"/>

		<!--Write build time stamp into a file, for reference-->
		<echo file="${build.dir}/${publish.dir}/assets/js/tstamp.txt" append="false">Build Date: ${TODAY}</echo>
		<echo file="${build.dir}/${publish.dir}/assets/css/tstamp.txt" append="false">Build Date: ${TODAY}</echo>
	</target>


	
    <!-- COPY FILES FOR MANIPULATION [private]-->
	<!-- Make a temporary dir, and flatten out the JS files into that folder -->
	<target name="-js.copy" depends="-init" description="(PRIVATE) Copies JS files into a temp dir (removes any sub dirs)">
		<echo message="Copying JavaScript files..."/>		
		<copy todir="${build.dir}/${publish.dir}/${temp.dir}/js" flatten="true">
			<fileset 
                dir="${src.js.dir}" 
                includes="${file.copy.include.js}"/>
		</copy>
		<echo message="JavaScript files are now in ${build.dir}/${publish.dir}/${temp.dir}/js, ready to be manipulated"/>
	</target>
	<!-- Make a temporary dir and copy the CSS files (except for IE specific styles) into that folder -->
	<target name="-css.copy" depends="-init" description="(PRIVATE) Copies CSS files into a temp dir (removes any sub dirs)">
		<echo message="Copying CSS files..."/>		
		<copy todir="${build.dir}/${publish.dir}/${temp.dir}/css">
			<fileset 
                dir="${src.css.dir}" 
                includes="${file.copy.include.css}"
				excludes="${file.copy.exclude.css}"/>
		</copy>
		<echo message="CSS files are now in ${build.dir}/${publish.dir}/${temp.dir}/css, ready to be manipulated"/>
	</target>		

		
    <!-- OPTIMIZE HTML FILES [private]-->
	<target name="-html.minify" description="(PRIVATE) Compresses HTML files but keeps line breaks for readability">
		<echo message="Compressing HTML files (keeping line breaks)..."/>		
		<apply executable="java" parallel="false">
			<fileset 
				dir="${build.dir}/${publish.dir}/html/pages/" 
				includes="${file.include.html}"
				excludes="${file.exclude.html}" 
				/>
			<arg value="-jar"/>
			<arg path="${tool.htmlcompressor}"/>
			<arg line="--type html"/>
			<arg line="--preserve-line-breaks"/>
			<srcfile/>
			<arg value="-o"/>
			<mapper type="glob" from="*" to="${publish.dir}/html-compressed/pages/*"/>
			<targetfile/>
		</apply>
	</target>
	

    <!-- OPTIMIZE CSS FILES [private]-->	
    <!--Minify CSS files-->
	<target name="-css.minify" depends="-css.copy" description="(PRIVATE) Minifies CSS files">
		<apply executable="java" parallel="false">				
			<fileset 
                dir="${build.dir}/${publish.dir}/${temp.dir}/css" 
                includes="${file.include.css}"
				excludes="${file.exclude.default.css}"/>
			<arg line="-jar"/>
			<arg path="${tool.yuicompressor}"/>
			<arg line="--line-break 0"/>
			<srcfile/>
			<arg line="-o"/>
			<mapper type="glob" from="*.css" to="${publish.dir}/${temp.dir}/css/*-min.css"/>
			<targetfile/>
		</apply>
		<echo>Done!</echo>
	</target>	
	<!--Concatenate CSS files-->
	<target name="-css.concatenate" depends="-css.minify" description="(PRIVATE) Concatenates CSS files">
		<concat destfile="${build.dir}/${publish.dir}/assets/css/styles-concat.min.css">
            <!-- ${file.concatenate.first.css} contains a comma separated list of files that should be first in the concatenated file-->
			<filelist 
                dir="${build.dir}/${publish.dir}/${temp.dir}/css" 
                files="${file.concatenate.first.css}"/>
			<!--All of the other files in the directory should appear after-->			
			<fileset 
                dir="${build.dir}/${publish.dir}/${temp.dir}/css"
                includes="${file.include.default.css}"
                excludes="${file.concatenate.first.css}"/>
		</concat>
		<echo>Done!</echo>
	</target>
	
	
    <!-- OPTIMIZE JAVASCRIPT FILES [private]-->
	<!--Minify JS files, excluding third party scripts that have already been minified-->
	<target name="-js.minify" depends="-js.copy" description="(PRIVATE) Minifies JavaScript files">
		<apply executable="java" parallel="false">
			<fileset 
                dir="${build.dir}/${publish.dir}/${temp.dir}/js" 
                includes="${file.include.js}"	
				excludes="${file.exclude.default.js}"/>
			<arg line="-jar"/>
			<arg path="${tool.yuicompressor}"/>
			<srcfile/>
			<arg line="-o"/>
			<mapper type="glob" from="*.js" to="${publish.dir}/${temp.dir}/js/*-min.js"/>
			<targetfile/>
		</apply>
		<echo>Done!</echo>
	</target>
    <!--Concatenate JS files-->
	<target name="-js.concatenate" depends="-js.minify" description="(PRIVATE) Concatenates JavaScript files">
		<concat destfile="${build.dir}/${publish.dir}/assets/js/scripts-concat.min.js">
            <!-- ${file.concatenate.first.js} contains a comma separated list of files that should be first in the concatenated file-->
			<filelist 
                dir="${build.dir}/${publish.dir}/${temp.dir}/js" 
                files="${file.concatenate.first.js}"
				/>
			<!--All of the other files in the directory should appear after (except for Modernizr which is included separately in the page header)-->
			<fileset 
                dir="${build.dir}/${publish.dir}/${temp.dir}/js"
                includes="${file.include.default.js}" 
                excludes="
					${jquery.js}, 
					${modernizr.js}
					"/>
		</concat>
		<echo>Done!</echo>
	</target>


    <!-- MERGE THE SSI INTO FULL WEB PAGES [private]-->
	<!-- Author: Robert Lie (http://www.mobilefish.com/download/ant/build_demo7.xml.txt) -->
	<!-- Customizations by Dawn Budge (http://www.dawnbudge.co.uk) and Aki Karkkainen (http://www.akikoo.org) -->
	<!-- Step 1. Search within the specified directories all *.shtml files -->
	<target name="-make_shtml_into_html" description="(PRIVATE) Converts SHTML files (Server Side Includes) into HTML files">
		<foreach param="msg" target="getfiles">
			<path>       
				<fileset 
					dir="${web.home}"
					includes="html/pages/**/index.shtml" 
					excludes=""
				/>
			</path>
		</foreach>
	</target>
	<target name="getfiles">
		<!-- Step 2. For each shtml file, the path is converted to an URL (url_path) -->
		<!-- Example: 
		/one-web-boilerplate/webroot/html/pages/boilerplate/index.shtml
		
		is mapped to: 
		
		http://one-web-boilerplate/html/pages/boilerplate/index.shtml 
		(Assuming Apache virtualhost is pointing to /one-web-boilerplate/webroot)
		-->		
		
		<pathconvert targetos="unix" property="url_path">
			<path location="${msg}"/>
			<map from="${web.home}" to="${web.url}" />
		</pathconvert> 

		<!-- Step 3. For each shtml file, the location is created where to store the final web page (webpage_path) -->    
		<!-- Example: 
		/one-web-boilerplate/webroot/html/pages/boilerplate/index.shtml
		
		is mapped to: 

		/one-web-boilerplate/build/publish/html/pages/boilerplate/index.shtml -->
		
		<pathconvert targetos="unix" property="webpage_path">
			<path location="${msg}"/>
			<map from="${web.home}" to="${build.dir}/${publish.dir}" />
		</pathconvert> 

		<!-- Step 4. For each shtm file, the Get task is applied using the url_path (step 2) and webpage_path (step 3) -->
		<!-- By doing so the SSI are merged into a single web page. The created web page file however still has an shtml file extension. -->

		<!-- Create dirs dynamically for each page-->
		<dirname file="${webpage_path}" property="new.dir"/>
		<mkdir dir="${new.dir}"/>	

		<!-- gets a whole file from a url -->
		<get src="${url_path}" dest="${webpage_path}" />

		<!-- move the matched file to the deploy location and change the file extension -->
		<move todir="${build.dir}/${publish.dir}">
			<fileset dir="${build.dir}/${publish.dir}">
				<include name="**/*.shtml"/>
			</fileset>
			<mapper type="glob" from="*.shtml" to="*.${web.ext}"/>
		</move>  
	</target>
	

	
	<!-- Update HTML header and footer files to use the minified assets -->
	<!-- For syntax, see http://www.jajakarta.org/ant/ant-1.6.1/docs/en/manual/OptionalTasks/replaceregexp.html -->	
	<target name="-useminified" description="(PRIVATE) Sets the value of OPTIMISEDASSETS to true so we can use minified assets">
		<echo message="Including minified assets in HTML header and footer..."/>
		<replaceregexp byline="true">
			<regexp pattern="\'OPTIMISEDASSETS\' value=\'\'"/>
			<substitution expression="\'OPTIMISEDASSETS\' value=\'true\'"/>
			<fileset 
				dir="${src.html.usemin.dir}" 
				includes="${file.usemin.html}"/>
		</replaceregexp>
	</target>
	<!-- Revert HTML header and footer files back to using individual assets after the build -->	
	<target name="-useseparate" description="(PRIVATE) Resets the value of OPTIMISEDASSETS after we're done with the build">
		<echo message="Reverting, now including individual assets in HTML header and footer..."/>
		<replaceregexp byline="true">
			<regexp pattern="\'OPTIMISEDASSETS\' value=\'true\'"/>
			<substitution expression="\'OPTIMISEDASSETS\' value=\'\'"/>
			<fileset 
				dir="${src.html.usemin.dir}" 
				includes="${file.usemin.html}"/>
		</replaceregexp>
	</target>
	
	
    <!-- FINISH BY CLEANING UP TEMP DIR -->
	<!--Delete temporary dir where the minified files were copied before being concatenated-->
	<target name="-cleanup" depends="-css.concatenate" description="(PRIVATE) Deletes the previous build files and creates a new build directory structure">
		<echo message="Deleting the temp directory..."/>
		<!--Delete previous build files-->
		<delete dir="${build.dir}/${publish.dir}/${temp.dir}"/>		
		<echo message="We're done!"/>		
	</target>

	

    <!-- OPTIMIZE PNG IMAGES [public]-->
	<!-- This task is run separately as we don't want to optimise images every time we do a build. -->
	<!-- Requires OptiPNG: http://optipng.sourceforge.net/ -->	
	<!-- INSTALL OptiPNG v0.6.5 on MAC OSX (adapted from http://www.phpied.com/install-png-tools-on-mac)
					
		1) Download OptiPNG: http://sourceforge.net/projects/optipng/files/OptiPNG/optipng-0.6.5/optipng-0.6.5.tar.gz/download
		2) Go to the dir where you downloaded it, and execute these commands in your terminal:
			$ tar -xzvf optipng-0.6.5.tar.gz
			$ cd optipng-0.6.5
			$ sudo ./configure
			$ sudo make install
			
			Done. OptiPNG is now installed to /usr/local/bin/optipng (by default)
			
		(Alternatively, you can just use Homebrew: http://mxcl.github.com/homebrew.)
	-->
	
    <target name="img.optipng" description="(PUBLIC) Optimizes .png images using optipng. ">
        <echo message="Optimizing PNG images..."/>        
        <!-- osfamily=unix is actually true on OS X as well -->
        <if>
            <and>
                <os family="unix" />
            </and>
            <then>
                <!-- work around https://sourceforge.net/tracker/?func=detail&aid=2671422&group_id=151404&atid=780916 -->
                <delete>
                    <fileset 
						dir="${build.dir}/${publish.dir}/assets/img/"
						includes="${file.include.img.png}"
						excludes="${file.exclude.img.png}"/>
                </delete>
                <apply executable="optipng" dest="${build.dir}/${publish.dir}/assets/img/" osfamily="unix">
                    <fileset 
						dir="${src.img.dir}" 
						includes="${file.include.img.png}" 
						excludes="${file.exclude.img.png}"/>
                    <arg value="-quiet"/>
                    <arg value="-o7"/>
                    <arg value="-out"/>
                    <targetfile/>
                    <srcfile/>
                    <mapper type="identity"/>
                </apply>
            </then>
            <elseif>
                <os family="unix" />
                <then>
                    <echo message="*** optipng NOT INSTALLED. SKIPPING OPTIMIZATION OF PNGs." />
                    <echo message="*** Install optipng to enable png optimization." />
                    <echo message="*** For instructions see 'Dependencies' at: http://html5boilerplate.com/docs/#Build-script#dependencies" />
                </then>
            </elseif>			
        </if>

        <!-- work around https://sourceforge.net/tracker/?func=detail&aid=2671422&group_id=151404&atid=780916 -->
        <apply executable="${tool.optipng}" dest="${build.dir}/${publish.dir}/assets/img/" osfamily="windows">
            <fileset 
				dir="${src.img.dir}" 
				includes="${file.include.img.png}" 
				excludes="${file.exclude.img.png}"/>
            <arg value="-quiet"/>
            <arg value="-o7"/>
            <arg value="-out"/>
            <targetfile/>
            <srcfile/>
            <mapper type="identity"/>
        </apply>
    </target>





    <!-- OPTIMIZE JPEG IMAGES [public]-->
	<!-- This task is run separately-->		
    <target name="img.jpegtran" description="(PUBLIC) Optimizes .jpg images using jpegtran">
        <echo message="Now, we clean up those jpgs..."/>

        <if>
            <equals arg1="${images.strip.metadata}" arg2="true"/>
            <then>
                <var name="strip-meta-tags" value="none"/>
            </then>
            <else>
                <var name="strip-meta-tags" value="all"/>
            </else>
        </if>

        <!-- On *nix's and OS X, check for jpegtran and give a helpful message if it's not installed -->
        <if>
            <and>
                <os family="unix" />
            </and>
            <then>
                <apply executable="jpegtran" dest="./${dir.publish}/${dir.images}" osfamily="unix">
                    <fileset dir="${dir.source}/${dir.images}" includes="**/*.jpg" excludes="${images.bypass}, ${images.default.bypass}"/>
                    <arg value="-copy"/>
                    <arg value="${strip-meta-tags}"/>
                    <arg value="-optimize"/>
                    <arg value="-outfile"/>
                    <targetfile/>
                    <srcfile/>
                    <mapper type="identity"/>
                    <!-- you may want to flag optimized images. If so, do it here. Otherwise change this to type="identity" -->
                    <!--<mapper type="glob" from="*.jpg" to="*.jpg"/>-->
                </apply>
            </then>
            <elseif>
                <os family="unix" />
                <then>
                    <echo message="*** jpegtran NOT INSTALLED. SKIPPING OPTIMIZATION OF JPEGs." />
                    <echo message="*** Install jpegtran to enable jpeg optimization." />
                    <echo message="*** For instructions see 'Dependencies' at: http://html5boilerplate.com/docs/#Build-script#dependencies" />
                </then>
            </elseif>
        </if>

        <apply executable="${basedir}/${dir.build.tools}/jpegtran.exe" dest="./${dir.publish}/${dir.images}" osfamily="windows">
            <fileset dir="${dir.source}/${dir.images}" includes="**/*.jpg"  excludes="${images.bypass}, ${images.default.bypass}"/>
            <arg value="-copy"/>
            <arg value="${strip-meta-tags}"/>
            <arg value="-optimize"/>
            <arg value="-outfile"/>
            <targetfile/>
            <srcfile/>
            <mapper type="identity"/>
            <!-- you may want to flag optimized images. If so, do it here. Otherwise change this to type="identity" -->
            <!--<mapper type="glob" from="*.jpg" to="*.jpg"/>-->
        </apply>
    </target>
	
	
	
	
	
</project>

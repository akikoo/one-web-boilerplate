// ========================================================================== //
// 
// Layout rules for One Web Boilerplate elements and modules.
// For more info on how to categorize your CSS, see SMACSS: http://smacss.com/
//
// Ems are based on generic browser default setting of 16px font size.
// 
// Use 'layout-' or 'l-' prefix in your classes. Consider putting rules for layout 
// classes inside media queries only (mobile first!). 
// 
// Credits & inspiration: 
// http://forabeautifulweb.com/blog/about/hardboiled_css3_media_queries/
// http://forabeautifulweb.com/blog/about/320_and_up/
// http://html5boilerplate.com/mobile
// http://adactio.com/journal/1700/
// http://zomigi.com/blog/essential-considerations-for-crafting-quality-media-queries/
// http://nicolasgallagher.com/mobile-first-css-sass-and-ie/
//
// @author Aki Karkkainen
// @url https://github.com/akikoo/one-web-boilerplate
// Twitter: http://twitter.com/akikoo
//
// Licensed under the MIT license.
// 
// ========================================================================== //


/**
 * How to generate files for both modern browsers and oldIE, from the same source:
 * 
 * .selector {
 *     @include x-respond-to($breakpoint-medium) { 
 *         float: left;
 *         width: 50%;
 *         @include x-old-ie {
 *             // These hacks won't appear in the normal stylesheet.
 *             // Serve fixed-width layout to oldIE (overwrite width declaration above).
 *             // Alternatively, you could remove this and set fixed width to the parent instead.
 *             width: x-relative-size(384, $base-font-size); 
 *         }
 *     }
 * }
 * 
 */


/* ==========================================================================
   @group Layout
   ========================================================================== */
/* 
 * Center the layout and set max width too. 
 */
.l-constrained {
    width: 95%;
    max-width: x-relative-size(992, $base-font-size); /* Make sure the grid doesn't get too wide */
    margin: 0 auto; 
    @include x-old-ie {
        // rules for IE<9 here.
        width: x-relative-size(768, $base-font-size); /* Serve fixed-width layout to oldIE */
    }
}


/* Grid container (row), containing any number of cells/columns 
   ========================================================================== */
.l-row {
    margin: 0 auto 20px;
    @include x-clearfix;
} 


/* Grid cells. No explicit width by default. Extend with `.l-cell--n` classes.
   ========================================================================== */
/**
* In order to work around browsers' different rounding behaviours, we'll float 
* the last column in a row to the right so the edge aligns. You can override 
* that behaviour by adding class="l-cell-end" in the last column. 
* 
* Idea taken from: 
* http://foundation.zurb.com/docs/grid.php 
* http://www.netmagazine.com/tutorials/building-modern-grid-system
* 
*/

.l-cell {
    @include x-respond-to($breakpoint-medium) { 
        float: left;
        min-height: 1px;
        position: relative;
        margin: 0 0 0 $gutter;
        /*
         * Allow the browser to break lines within words in order to prevent overflow 
         * when an otherwise unbreakable string is too long to fit in its containing cell.
         */
        word-wrap: break-word; 
    }
}

/* Cancel the left margin in the first item */
.l-cell:first-child, 
.l-cell .l-cell:first-child {
    margin-left: 0;
}

.l-cell:last-child { 
    @include x-respond-to($breakpoint-medium) { 
        float: right; 
    }
}


/* Cell modifiers
   ========================================================================== */

.l-cell.l-cell-end {
    @include x-respond-to($breakpoint-medium) { 
        float: left; 
    }
}


/* Cell dimensions (assuming we're using six columns; this can be changed in _settings.scss)
   ========================================================================== */

// First level
.l-cell-1 {
    @include x-respond-to($breakpoint-medium) { 
        @include x-columns(1);
    }
}

.l-cell-2 {
    @include x-respond-to($breakpoint-medium) { 
        @include x-columns(2);
    }
}

.l-cell-3 {
    @include x-respond-to($breakpoint-medium) { 
        @include x-columns(3);
    }
}

.l-cell-4 {
    @include x-respond-to($breakpoint-medium) { 
        @include x-columns(4);
    }
}

.l-cell-5 {
    @include x-respond-to($breakpoint-medium) { 
        @include x-columns(5);
    }
}

.l-cell-6 {
    @include x-respond-to($breakpoint-medium) { 
        @include x-columns(6);
    }
}

// Second level
// nestedcolumns(children, parent);
.l-cell-3 .l-cell-2 {
    @include x-respond-to($breakpoint-medium) { 
        @include x-nestedcolumns(2, 3);
    }
}

.l-cell-3 .l-cell-1 {
    @include x-respond-to($breakpoint-medium) { 
        @include x-nestedcolumns(1, 3);
    }
}